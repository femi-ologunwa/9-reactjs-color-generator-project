{"version":3,"sources":["SingleColor.js","App.js","index.js"],"names":["SingleColor","rgb","weight","index","hexColor","useState","alert","setAlert","bcg","join","hexValue","useEffect","timeout","setTimeout","clearTimeout","className","style","backgroundColor","onClick","navigator","clipboard","writeText","App","color","setColor","error","setError","Values","all","list","setList","onSubmit","e","preventDefault","colors","console","log","type","value","onChange","target","placeholder","map","key","hex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAyCeA,EAtCK,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EAC7BC,oBAAS,GADoB,mBAChDC,EADgD,KACzCC,EADyC,KAGjDC,EAAMP,EAAIQ,KAAK,KAKfC,EAAQ,WAAON,GAYrB,OATAO,qBAAU,WACP,IAAMC,EAAUC,YAAW,WACxBN,GAAS,KACT,KACH,OAAO,WACJO,aAAaF,MAEhB,CAACN,IAGD,6BACGS,UAAS,gBAAWZ,EAAQ,IAAM,eAClCa,MAAO,CAAEC,gBAAgB,OAAD,OAAST,EAAT,MACxBU,QAAS,WACNX,GAAS,GAGTY,UAAUC,UAAUC,UAAUX,KAGjC,uBAAGK,UAAU,iBAAiBb,EAA9B,KACA,uBAAGa,UAAU,eAAeL,GAC3BJ,GAAS,uBAAGS,UAAU,SAAb,yB,gBCmBJO,MAnDf,WAAgB,IAAD,EACcjB,mBAAS,IADvB,mBACLkB,EADK,KACEC,EADF,OAEcnB,oBAAS,GAFvB,mBAELoB,EAFK,KAEEC,EAFF,OAGYrB,mBAAS,IAAIsB,IAAO,WAAWC,IAAI,KAH/C,mBAGLC,EAHK,KAGCC,EAHD,KAiBZ,OACG,oCACG,6BAASf,UAAU,aAChB,+CACA,0BAAMgB,SAhBM,SAACC,GACnBA,EAAEC,iBACF,IACG,IAAIC,EAAS,IAAIP,IAAOJ,GAAOK,IAAI,IACnCE,EAAQI,GAET,MAAOT,GACNC,GAAS,GACTS,QAAQC,IAAIX,MASN,2BACGY,KAAK,OACLC,MAAOf,EACPgB,SAAU,SAACP,GAAD,OAAOR,EAASQ,EAAEQ,OAAOF,QACnCG,YAAY,UACZ1B,UAAS,UAAKU,EAAQ,QAAU,QAEnC,4BAAQV,UAAU,MAAMsB,KAAK,UAA7B,YAKN,6BAAStB,UAAU,UACfc,EAAKa,KAAI,SAACnB,EAAOpB,GAEf,OACG,kBAAC,EAAD,eACGwC,IAAKxC,GACDoB,EAFP,CAGGpB,MAAOA,EACPC,SAAUmB,EAAMqB,aCzCrCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.eb27491f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n//import rgbToHex from './utils';\n\nconst SingleColor = ({ rgb, weight, index, hexColor }) => {\n   const [alert, setAlert] = useState(false);\n\n   const bcg = rgb.join(','); //convert rgb into rgb color code format\n   //console.log(bcg);\n\n   //const hex = rgbToHex(...rgb);\n\n   const hexValue = `#${hexColor}`;\n\n   //effect to clear alert text after 3 secs\n   useEffect(() => {\n      const timeout = setTimeout(() => {\n         setAlert(false);\n      }, 3000);\n      return () => {\n         clearTimeout(timeout);\n      };\n   }, [alert]);\n\n   return (\n      <article\n         className={`color ${index > 10 && 'color-light'}`}\n         style={{ backgroundColor: `rgb(${bcg})` }}\n         onClick={() => {\n            setAlert(true);\n\n            //use javascript function to copy value to clicpboard\n            navigator.clipboard.writeText(hexValue);\n         }}\n      >\n         <p className='percent-value'>{weight}%</p>\n         <p className='color-value'>{hexValue}</p>\n         {alert && <p className='alert'>copied to clipboard</p>}\n      </article>\n   );\n};\n\nexport default SingleColor;\n","import React, { useState } from 'react';\nimport SingleColor from './SingleColor';\nimport Values from 'values.js'; //external library to generate list of tints and shades of a color.\n\nfunction App() {\n   const [color, setColor] = useState(''); //color for which tints and shades will be generated\n   const [error, setError] = useState(false); //to flag wrong color code input\n   const [list, setList] = useState(new Values('#ffa76a').all(10)); //list of color codes (tints and shades) generated for a user input\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      try {\n         let colors = new Values(color).all(10); //generates 21 color codes; 10 tints, 10 shades and base color\n         setList(colors);\n         //console.log(colors);\n      } catch (error) {\n         setError(true);\n         console.log(error);\n      }\n   };\n\n   return (\n      <>\n         <section className='container'>\n            <h3>color generator</h3>\n            <form onSubmit={handleSubmit}>\n               <input\n                  type='text'\n                  value={color}\n                  onChange={(e) => setColor(e.target.value)}\n                  placeholder='#f15025'\n                  className={`${error ? 'error' : null}`}\n               />\n               <button className='btn' type='submit'>\n                  submit\n               </button>\n            </form>\n         </section>\n         <section className='colors'>\n            {list.map((color, index) => {\n               //console.log(color);\n               return (\n                  <SingleColor\n                     key={index}\n                     {...color} //get color property only out of all other list item property\n                     index={index}\n                     hexColor={color.hex}\n                  />\n               );\n            })}\n         </section>\n      </>\n   );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}